{# This extends the main control panel layout from Craft CMS, ensuring consistent page design and structure #}
{% extends "_layouts/cp.twig" %}

{# Set the page title displayed in the browser tab and Craft control panel header #}
{% set title = "Broken Links"|t('broken-links') %}

{% block content %}

{# Container for the button and loading message #}
<div class="container">
    <button id="run-crawl" class="btn">Scan Links</button>
    <div id="loading"></div>
</div>

{# Placeholder for displaying results dynamically #}
<div id="results"></div>

{# Inline CSS styles for the control panel interface #}
<style>
    body {
        font-family: 'Mulish', sans-serif;
        line-height: 1.5;
        color: #333;
        background-color: #E4ECF6;
    }

    .title {
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 20px;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

    thead {
        background-color: #f3f4f6;
    }

    th {
        text-align: left;
        padding: 10px;
        font-weight: bold;
    }

    td {
        padding: 10px;
        border-bottom: 1px solid #ddd;
    }

    tr:hover {
        background-color: #f9fafb;
    }

    .container {
        display: flex; /* Use flexbox to arrange items in a row */
        align-items: center; /* Vertically center-align the items */
        gap: 10px; /* Add spacing between the button and the loading message */
    }

    .btn {
        background-color: #DC2625;
        color: white;
        padding: 10px 15px;
        border: none;
        cursor: pointer;
        border-radius: 4px;
        font-size: 14px;
    }

    .btn:hover {
        background-color: #b91c1c;
    }

    .action-link {
        color: #006eff;
        text-decoration: none;
    }

    .action-link:hover {
        text-decoration: underline;
    }

    #loading {
        font-size: 14px;
        color: #555;
    }
</style>

{# JavaScript logic to handle the scan request and display results #}
<script>
    document.getElementById('run-crawl').addEventListener('click', function () {
        const loading = document.getElementById('loading');
        const resultsDiv = document.getElementById('results');

        // Show an initial message while the scan starts
        loading.textContent = 'Scanning... Please wait.';

        // Make a request to trigger the scan
        fetch('/brokenlinks/run-crawl')
            .then(response => response.json())
            .then(data => {
                console.log('Scan started:', data);

                // If the scan started successfully, show processing message
                if (data.success) {
                    loading.textContent = 'Processing... This may take some time.';
                    resultsDiv.innerHTML = ''; // Clear previous results
                    pollForResults(); // Start polling for results
                } else {
                    resultsDiv.innerHTML = `<p>Error: ${data.message || 'Unknown error'}</p>`;
                    loading.textContent = '';
                }
            })
            .catch(error => {
                console.error('Error:', error);
                resultsDiv.innerHTML = `<p>Error: ${error.message}</p>`;
                loading.textContent = '';
            });

        /**
         * Polls the server periodically for results
         */
        function pollForResults() {
            let attempts = 0;
            const maxAttempts = 10; // Stop polling after 10 attempts (adjustable)
            const pollInterval = 5000; // Check every 5 seconds

            const interval = setInterval(() => {
                attempts++;

                fetch('/brokenlinks/get-results')
                    .then(response => response.json())
                    .then(data => {
                        console.log('Checking for results:', data);
                        console.log("ðŸ“Œ Sitemap URLs:", data.sitemap_urls || "No sitemap URLs found");

                        if (data.success && Array.isArray(data.data) && data.data.length > 0) {
                            // Results are ready, display them and stop polling
                            clearInterval(interval);
                            loading.textContent = '';
                            displayResults(data.data);
                        } else if (attempts >= maxAttempts) {
                            // Stop polling after max attempts
                            clearInterval(interval);
                            loading.textContent = 'Processing took too long. Please check back later.';
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching results:', error);
                        clearInterval(interval);
                        loading.textContent = 'Error fetching results. Try again later.';
                    });
            }, pollInterval);
        }

        /**
         * Displays the broken links in a table
         */
        function displayResults(links) {
            resultsDiv.innerHTML = '';

            if (links.length === 0) {
                resultsDiv.innerHTML = '<p>No broken links found.</p>';
                return;
            }

            const table = document.createElement('table');
            table.innerHTML = `
                <thead>
                    <tr>
                        <th>Broken Link</th>
                        <th>Link Text</th>
                        <th>Field</th>
                        <th>Page URL</th>
                        <th>Entry</th>
                    </tr>
                </thead>
                <tbody>
                    ${links
                        .map(
                            link => `
                            <tr>
                                <td>
                                    <a href="${link.url}" target="_blank" class="action-link">${link.url}</a>
                                </td>
                                <td>${link.linkText || 'N/A'}</td>
                                <td>${link.field || 'todo'}</td>
                                <td>
                                    <a href="${link.pageUrl}" target="_blank" class="action-link">
                                        ${link.pageUrl.replace("{{ siteUrl }}", '') || '/'}
                                    </a>
                                </td>
                                <td>
                                    ${
                                        link.entryUrl
                                            ? `<a href="${link.entryUrl}" target="_blank" class="action-link">${link.entryTitle || 'N/A'}</a>`
                                            : 'N/A'
                                    }
                                </td>
                            </tr>
                        `
                        )
                        .join('')}
                </tbody>
            `;
            resultsDiv.appendChild(table);
        }
    });
</script>


{% endblock %}
